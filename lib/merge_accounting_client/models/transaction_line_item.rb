=begin
#Merge Accounting API

#The unified API for building rich integrations with multiple Accounting & Finance platforms.

The version of the OpenAPI document: 1.0
Contact: hello@merge.dev
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.1.1

=end

require 'date'
require 'time'

module MergeAccountingClient
  # # The TransactionLineItem Object ### Description The `TransactionLineItem` object is used to represent a transaction's line items.  ### Usage Example Fetch from the `GET TransactionLineItem` endpoint and view the transaction's line items.
  class TransactionLineItem
    # A memo attached to the line item.
    attr_accessor :memo

    # The line item's unit price.
    attr_accessor :unit_price

    # The line item's quantity.
    attr_accessor :quantity

    attr_accessor :item

    # The line item's account.
    attr_accessor :account

    # The line's associated tracking category.
    attr_accessor :tracking_category

    # The line item's total.
    attr_accessor :total_line_amount

    # The line item's tax rate.
    attr_accessor :tax_rate

    # The third-party API ID of the matching object.
    attr_accessor :remote_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'memo' => :'memo',
        :'unit_price' => :'unit_price',
        :'quantity' => :'quantity',
        :'item' => :'item',
        :'account' => :'account',
        :'tracking_category' => :'tracking_category',
        :'total_line_amount' => :'total_line_amount',
        :'tax_rate' => :'tax_rate',
        :'remote_id' => :'remote_id'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'memo' => :'String',
        :'unit_price' => :'String',
        :'quantity' => :'String',
        :'item' => :'String',
        :'account' => :'String',
        :'tracking_category' => :'String',
        :'total_line_amount' => :'String',
        :'tax_rate' => :'String',
        :'remote_id' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'memo',
        :'unit_price',
        :'quantity',
        :'item',
        :'account',
        :'tracking_category',
        :'total_line_amount',
        :'tax_rate',
        :'remote_id'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `MergeAccountingClient::TransactionLineItem` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `MergeAccountingClient::TransactionLineItem`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'memo')
        self.memo = attributes[:'memo']
      end

      if attributes.key?(:'unit_price')
        self.unit_price = attributes[:'unit_price']
      end

      if attributes.key?(:'quantity')
        self.quantity = attributes[:'quantity']
      end

      if attributes.key?(:'item')
        self.item = attributes[:'item']
      end

      if attributes.key?(:'account')
        self.account = attributes[:'account']
      end

      if attributes.key?(:'tracking_category')
        self.tracking_category = attributes[:'tracking_category']
      end

      if attributes.key?(:'total_line_amount')
        self.total_line_amount = attributes[:'total_line_amount']
      end

      if attributes.key?(:'tax_rate')
        self.tax_rate = attributes[:'tax_rate']
      end

      if attributes.key?(:'remote_id')
        self.remote_id = attributes[:'remote_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      pattern = Regexp.new(/^\d{0,32}(?:\.\d{0,16})?$/)
      if !@unit_price.nil? && @unit_price !~ pattern
        invalid_properties.push("invalid value for \"unit_price\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^\d{0,24}(?:\.\d{0,8})?$/)
      if !@quantity.nil? && @quantity !~ pattern
        invalid_properties.push("invalid value for \"quantity\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^\d{0,32}(?:\.\d{0,16})?$/)
      if !@total_line_amount.nil? && @total_line_amount !~ pattern
        invalid_properties.push("invalid value for \"total_line_amount\", must conform to the pattern #{pattern}.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@unit_price.nil? && @unit_price !~ Regexp.new(/^\d{0,32}(?:\.\d{0,16})?$/)
      return false if !@quantity.nil? && @quantity !~ Regexp.new(/^\d{0,24}(?:\.\d{0,8})?$/)
      return false if !@total_line_amount.nil? && @total_line_amount !~ Regexp.new(/^\d{0,32}(?:\.\d{0,16})?$/)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] unit_price Value to be assigned
    def unit_price=(unit_price)
      pattern = Regexp.new(/^\d{0,32}(?:\.\d{0,16})?$/)
      if !unit_price.nil? && unit_price !~ pattern
        fail ArgumentError, "invalid value for \"unit_price\", must conform to the pattern #{pattern}."
      end

      @unit_price = unit_price
    end

    # Custom attribute writer method with validation
    # @param [Object] quantity Value to be assigned
    def quantity=(quantity)
      pattern = Regexp.new(/^\d{0,24}(?:\.\d{0,8})?$/)
      if !quantity.nil? && quantity !~ pattern
        fail ArgumentError, "invalid value for \"quantity\", must conform to the pattern #{pattern}."
      end

      @quantity = quantity
    end

    # Custom attribute writer method with validation
    # @param [Object] total_line_amount Value to be assigned
    def total_line_amount=(total_line_amount)
      pattern = Regexp.new(/^\d{0,32}(?:\.\d{0,16})?$/)
      if !total_line_amount.nil? && total_line_amount !~ pattern
        fail ArgumentError, "invalid value for \"total_line_amount\", must conform to the pattern #{pattern}."
      end

      @total_line_amount = total_line_amount
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          memo == o.memo &&
          unit_price == o.unit_price &&
          quantity == o.quantity &&
          item == o.item &&
          account == o.account &&
          tracking_category == o.tracking_category &&
          total_line_amount == o.total_line_amount &&
          tax_rate == o.tax_rate &&
          remote_id == o.remote_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [memo, unit_price, quantity, item, account, tracking_category, total_line_amount, tax_rate, remote_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = MergeAccountingClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
